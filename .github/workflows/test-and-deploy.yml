name: Test and Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.0
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Docker —Å–ª–æ–µ–≤
    - name: üîß Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    - name: üî® Build containers
      run: |
        # –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        docker build -t horse-booking-app . &
        
        # –°–±–æ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        docker build -t test-runner -f Dockerfile.test \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max . &
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö —Å–±–æ—Ä–æ–∫
        wait
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - name: üöÄ Start application
      run: |
        docker run -d --name horse-booking \
          -p 3000:3000 \
          --health-cmd="wget -q -O- http://127.0.0.1:3000 || exit 1" \
          --health-interval=5s \
          --health-timeout=3s \
          --health-retries=5 \
          horse-booking-app
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        timeout 60 bash -c 'until docker inspect horse-booking --format="{{.State.Health.Status}}" | grep -q healthy; do sleep 2; done'
        echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    - name: üß™ Run tests
      run: |
        mkdir -p allure-results
        
        docker run --rm \
          --network container:horse-booking \
          -v $(pwd)/allure-results:/tests/allure-results \
          -e BASE_URL=http://localhost:3000 \
          test-runner
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    - name: üìà Generate report
      if: always()
      run: |
        if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º Docker –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
          docker run --rm \
            -v $(pwd)/allure-results:/allure-results \
            -v $(pwd)/allure-report:/allure-report \
            frankescobar/allure-docker-service:latest \
            allure generate /allure-results -o /allure-report --clean
        else
          mkdir -p allure-report
          echo "<h1>No test results found</h1>" > allure-report/index.html
        fi
    
    - name: üì§ Upload report
      uses: actions/upload-pages-artifact@v3
      if: always()
      with:
        path: allure-report/
    
    - name: üßπ Cleanup
      if: always()
      run: |
        docker stop horse-booking || true
        docker rm horse-booking || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: üåê Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4